import turtle
import os
import math
from Tkinter import *

#Set up screen
wn = turtle.Screen()
wn.bgcolor("black")
wn.title("Space Invaders")

#Draw border
border_pen = turtle.Turtle()
border_pen.speed(0)
border_pen.color("white")
border_pen.penup()
border_pen.setposition(-300,-300)
border_pen.pendown()
border_pen.pensize(3)
for side in range(4):
    border_pen.fd(600)
    border_pen.lt(90)
border_pen.hideturtle()

#Create the player turtle
player = turtle.Turtle()
player.color("blue")
player.shape("triangle")
player.penup()
player.speed(0)
player.setposition(0,-250)
player.setheading(90)

playerspeed = 15

#Create the enemy
enemy = turtle.Turtle()
enemy.color("red")
enemy.shape("circle")
enemy.penup()
enemy.speed(0)
enemy.setposition(-280,280)


enemyspeed = 2

#Create the player bullet
bullet = turtle.Turtle()
bullet.color("yellow")
bullet.shape("triangle")
bullet.penup()
bullet.speed(0)
bullet.setheading(90)
bullet.shapesize(0.5, 0.5)
bullet.hideturtle()

bulletspeed = 20

#Define bullet state
#ready
#fire
bulletstate = "ready"

#Move the player left and RIGHT
def move_left():
    x = player.xcor()
    x -= playerspeed
    if x < -280:
        x = -280
    player.setx(x)

def move_right():
    x = player.xcor()
    x += playerspeed
    if x > 280:
        x = 280
    player.setx(x)

def fire_bullet():
    #Decalare bulletstate as a globalif it needs changed
    global bulletstate
    if bulletstate == "ready":
        bulletstate = "fire"
        x = player.xcor()
        y = player.ycor() +10
        bullet.setposition(x,y)
        bullet.showturtle()

def isCollision(t1, t2):
    distance = math.sqrt(math.pow(t1.xcor()-t2.xcor(),2)+math.pow(t1.ycor()-t2.ycor(),2))
    if distance < 15:
        return True
    else:
        return False


#Create keybaord bindings
turtle.listen()
turtle.onkey(move_left, "Left")
turtle.onkey(move_right, "Right")
turtle.onkey(fire_bullet,"space")

while True:

    #Move enemies
    x = enemy.xcor()
    x += enemyspeed
    enemy.setx(x)

    #Move the enemy back and DOWN
    if enemy.xcor() > 280 or enemy.xcor() < -280 or enemy.ycor() > 300 or enemy.ycor() < -300:
        y = enemy.ycor()
        y = y - 40
        enemyspeed = enemyspeed * (-1)
        enemy.sety(y)
        if y > 300 or y < -300:
            enemy.setposition(-280,280)


    #Move the bullet
    if bulletstate == "fire":
        y = bullet.ycor()
        y += bulletspeed
        bullet.sety(y)

    #check to see if the bullet has gone to top
    if bullet.ycor() > 275:
        bullet.hideturtle()
        bulletstate = "ready"


  #check for a collision between the bullets and the enemyspeed
    if isCollision(bullet, enemy):
         #reset the bullet
         bullet.hideturtle()
         bulletstate = "ready"
         bullet.setposition(0,-400)
         #Reset the enemy
         enemy.setposition(-150,150)

    if isCollision(player, enemy):
        player.hideturtle()
        enemy.hideturtle()
        print("GAME OVER")
        turtle.Screen().bye()
        break

delay = raw_input("Press enter to finish")
